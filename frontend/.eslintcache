[{"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/index.js":"1","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/App.js":"2","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/store.js":"3","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reportWebVitals.js":"4","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/Login.js":"5","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/Home.js":"6","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/register.js":"7","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/PrivateRoute.js":"8","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/setAuthToken.js":"9","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/actions/authAction.js":"10","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/index.js":"11","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/actions/types.js":"12","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/LoginCard.js":"13","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/authReducer.js":"14","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/errorReducer.js":"15","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/is-empty.js":"16","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/hooks/useFetch.js":"17","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/LoadingScreen.js":"18"},{"size":616,"mtime":1704172235539,"results":"19","hashOfConfig":"20"},{"size":1438,"mtime":1704172235537,"results":"21","hashOfConfig":"20"},{"size":478,"mtime":1704172235539,"results":"22","hashOfConfig":"20"},{"size":362,"mtime":1704172235539,"results":"23","hashOfConfig":"20"},{"size":1336,"mtime":1704191928089,"results":"24","hashOfConfig":"20"},{"size":2844,"mtime":1704194098657,"results":"25","hashOfConfig":"20"},{"size":16183,"mtime":1704172235538,"results":"26","hashOfConfig":"20"},{"size":698,"mtime":1704172235540,"results":"27","hashOfConfig":"20"},{"size":321,"mtime":1704172235540,"results":"28","hashOfConfig":"20"},{"size":2254,"mtime":1704172235538,"results":"29","hashOfConfig":"20"},{"size":232,"mtime":1704172235539,"results":"30","hashOfConfig":"20"},{"size":179,"mtime":1704172235538,"results":"31","hashOfConfig":"20"},{"size":6959,"mtime":1704192311357,"results":"32","hashOfConfig":"20"},{"size":674,"mtime":1704172235539,"results":"33","hashOfConfig":"20"},{"size":318,"mtime":1704172235539,"results":"34","hashOfConfig":"20"},{"size":231,"mtime":1704172235540,"results":"35","hashOfConfig":"20"},{"size":662,"mtime":1704193831568,"results":"36","hashOfConfig":"20"},{"size":383,"mtime":1704193824492,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1jjz1li",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/index.js",[],["79","80"],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/App.js",["81","82"],"import logo from './logo.svg';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport store from \"./store\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authAction\";\nimport jwt_decode from \"jwt-decode\";\nimport { connect } from \"react-redux\";\nimport register from './components/register';\nimport Login from './components/Login';\nimport Home from './components/Home';\nimport PrivateRoute from './utils/PrivateRoute';\n\nif (localStorage.jwtToken) {\n\n  //Set Auth Token to Header Auth\n  setAuthToken(localStorage.jwtToken);\n\n  //Decode Token & get User INfo\n  const decoded = jwt_decode(localStorage.jwtToken);\n\n  //Set User and isAuthenticated to True\n  store.dispatch(setCurrentUser(decoded));\n\n  //check for expired Token\n  const currentTime = Date.now() / 1000;\n\n  if (decoded.exp < currentTime) {\n    //Logut user after token expire\n    store.dispatch(logoutUser());\n\n    //redirect to Login\n    window.location.href = \"/\";\n  }\n}\n\nfunction App() {\n  return (\n    <>\n      <Router>\n\n        <Switch>\n          <Route path=\"/\">\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path=\"/register\" component={register} />\n              <PrivateRoute exact path=\"/home\" component={Home} />\n\n\n\n            </Switch>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/store.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reportWebVitals.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/Login.js",["83"],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/Home.js",["84","85","86","87","88","89","90","91","92","93"],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/register.js",["94"],"import React, { useState, useEffect } from \"react\";\nimport {\n    Grid,\n    Typography,\n    TextField,\n    Button,\n    CircularProgress,\n    Card,\n    Container,\n} from \"@mui/material\";\n\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../actions/authAction\";\nimport PropTypes from \"prop-types\";\nimport { withRouter, NavLink } from \"react-router-dom\";\nimport { clearErrors } from \"../actions/authAction\";\n\nfunction Register(props) {\n\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [password2, setPassword2] = useState(\"\");\n    const [phone, setphone] = useState(\"\");\n    useEffect(() => {\n        props.clearErrors();\n    }, []);\n\n    let { errors } = props;\n    const onChange = (e) => {\n        switch (e.target.name) {\n            case \"name\": {\n                setName(e.target.value.toLowerCase());\n                break;\n            }\n            case \"email\": {\n                setEmail(e.target.value);\n                break;\n            }\n            case \"password\": {\n                setPassword(e.target.value);\n                break;\n            }\n            case \"password2\": {\n                setPassword2(e.target.value);\n                break;\n            }\n            case \"phone\": {\n                setphone(e.target.value);\n                break;\n            }\n            default:\n                break;\n        }\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        const newUser = {\n            name: name,\n            email: email,\n            password: password,\n            password2: password2,\n            phone: phone,\n        };\n        props.registerUser(newUser, props.history);\n    };\n\n    if (props.auth.isAuthenticated) {\n        props.history.push(\"/home\");\n    }\n    const loading = props.auth.loading;\n    useEffect(() => {\n    }, []);\n    return (\n        <Container maxWidth=\"xs\" style={{ padding: \"1rem\", marginTop: \"1rem\" }}>\n            <Card>\n                <Grid\n                    container\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    style={{ paddingBottom: \"1rem\", marginTop: \"0.5rem\" }}\n                    spacing={2}\n                >\n                    <Grid item xs={12}>\n                        <Typography\n                            align=\"center\"\n                            color=\"secondary\"\n                            variant=\"h2\"\n                        >\n                            Sign Up\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography\n                            align=\"center\"\n                            display=\"block\"\n                            color=\"secondary\"\n                            variant=\"overline\"\n                        >\n                            Create a new account\n                        </Typography>\n                    </Grid>\n                    <form onSubmit={onSubmit} style={{ width: \"100%\", margin: \"1rem\" }}>\n                        <Container maxWidth=\"xs\">\n                            <Grid item xs={12}>\n                                {errors.name ? (\n                                    <TextField\n                                        error\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        name=\"name\"\n                                        label=\"Username\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        color=\"secondary\"\n                                        value={name}\n                                        onChange={onChange}\n                                        helperText={errors.name}\n                                    ></TextField>\n                                ) : (\n                                    <TextField\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        name=\"name\"\n                                        label=\"Username\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        value={name}\n                                        onChange={onChange}\n                                    ></TextField>\n                                )}\n                            </Grid>\n                            <Grid item xs={12}>\n                                {errors.email ? (\n                                    <TextField\n                                        color=\"secondary\"\n                                        error\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"email\"\n                                        label=\"Email address\"\n                                        type=\"email\"\n                                        helperText={errors.email}\n                                        value={email}\n                                        onChange={onChange}\n                                    ></TextField>\n                                ) : (\n                                    <TextField\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"email\"\n                                        label=\"Email address\"\n                                        type=\"email\"\n                                        helperText=\"use gravatar email for profile pic\"\n                                        value={email}\n                                        onChange={onChange}\n                                    ></TextField>\n                                )}\n                            </Grid>\n                            <Grid item xs={12}>\n                                {errors.phone ? (\n                                    <TextField\n                                        color=\"secondary\"\n                                        error\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"phone\"\n                                        label=\"Phone Number\"\n                                        type=\"number\"\n                                        helperText={errors.phone}\n                                        value={phone}\n                                        onChange={onChange}\n                                        inputProps={{\n                                            maxLength: 10\n                                        }}\n                                    ></TextField>\n                                ) : (\n                                    <TextField\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"phone\"\n                                        label=\"Phone Number\"\n                                        type=\"number\"\n                                        value={phone}\n                                        onChange={onChange}\n                                        inputProps={{\n                                            maxLength: 10\n                                        }}\n\n                                    ></TextField>\n                                )}\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                {errors.password ? (\n                                    <TextField\n                                        color=\"secondary\"\n                                        error\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        name=\"password\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        label=\"Password\"\n                                        type=\"password\"\n                                        value={password}\n                                        onChange={onChange}\n                                        helperText={errors.password}\n                                    ></TextField>\n                                ) : (\n                                    <TextField\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"password\"\n                                        label=\"Password\"\n                                        type=\"password\"\n                                        value={password}\n                                        onChange={onChange}\n                                    ></TextField>\n                                )}\n                            </Grid>\n                            <Grid item xs={12}>\n                                {errors.password2 ? (\n                                    <TextField\n                                        error\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        name=\"password2\"\n                                        label=\"Re-enter your Password\"\n                                        type=\"password\"\n                                        value={password2}\n                                        onChange={onChange}\n                                        helperText={errors.password2}\n                                    ></TextField>\n                                ) : (\n                                    <TextField\n                                        color=\"secondary\"\n                                        fullWidth\n                                        style={{\n                                            marginBottom: \"1rem\",\n                                        }}\n                                        variant=\"outlined\"\n                                        name=\"password2\"\n                                        InputLabelProps={{\n                                            style: { color: \"#c7c4c0\" },\n                                        }}\n                                        label=\"Re-enter your Password\"\n                                        type=\"password\"\n                                        value={password2}\n                                        onChange={onChange}\n                                    ></TextField>\n                                )}\n                            </Grid>\n                            <Grid item xs={12} style={{ marginBottom: \"1rem\" }}>\n                                {loading ? (\n                                    <Button\n                                        variant=\"text\"\n                                        color=\"primary\"\n                                        fullWidth={true}\n                                        disabled\n                                    >\n                                        <CircularProgress color=\"secondary\" />\n                                    </Button>\n                                ) : (\n                                    <Button\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        fullWidth={true}\n                                    >\n                                        Submit\n                                    </Button>\n                                )}\n                            </Grid>\n                        </Container>\n                    </form>\n                </Grid>\n            </Card>\n            <Card style={{ padding: \"1rem\", marginTop: \"1rem\" }} elevation={5}>\n                <Typography align=\"center\">\n                    Have an account&nbsp;?&nbsp; &nbsp;\n                    <NavLink\n                        style={{\n                            outline: \"2px solid #303030\",\n                            padding: \"0.5rem\",\n                            outlineRadius: \"1rem\",\n                            color: \"inherit\",\n                            textDecoration: \"none\",\n                        }}\n                        to=\"/\"\n                    >\n                        {\" \"}\n                        Log in\n                    </NavLink>\n                </Typography>\n            </Card>\n        </Container>\n    );\n}\nRegister.prototype = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    clearErrors: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors,\n});\n\nexport default connect(mapStateToProps, { registerUser, clearErrors })(\n    withRouter(Register)\n);\n","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/PrivateRoute.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/setAuthToken.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/actions/authAction.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/index.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/actions/types.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/LoginCard.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/authReducer.js",["95"],"import { SET_CURRENT_USER, AUTH_LOADING } from \"../actions/types\";\nimport isEmpty from '../utils/is-empty';\nconst initialState = {\n    isAuthenticated: false,\n    loading: false,\n    user: {}\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload,\n                //Authentication Check\n            };\n        case AUTH_LOADING:\n            return {\n                ...state,\n                loading: !state.loading,\n            }\n        default: return state;\n    }\n}","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/reducers/errorReducer.js",["96"],"import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\nconst initialState = {}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload\n        case CLEAR_ERRORS:\n            return {};\n        default: return state;\n    }\n\n}","/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/utils/is-empty.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/hooks/useFetch.js",[],"/Users/harshit/Documents/softwares/MERN_AUTH/frontend/src/components/LoadingScreen.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":12},{"ruleId":"101","severity":1,"message":"105","line":7,"column":10,"nodeType":"103","messageId":"104","endLine":7,"endColumn":17},{"ruleId":"101","severity":1,"message":"106","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":13},{"ruleId":"101","severity":1,"message":"107","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"108","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"101","severity":1,"message":"109","line":3,"column":3,"nodeType":"103","messageId":"104","endLine":3,"endColumn":7},{"ruleId":"101","severity":1,"message":"110","line":5,"column":3,"nodeType":"103","messageId":"104","endLine":5,"endColumn":12},{"ruleId":"101","severity":1,"message":"111","line":7,"column":3,"nodeType":"103","messageId":"104","endLine":7,"endColumn":19},{"ruleId":"101","severity":1,"message":"112","line":19,"column":8,"nodeType":"103","messageId":"104","endLine":19,"endColumn":17},{"ruleId":"101","severity":1,"message":"113","line":20,"column":10,"nodeType":"103","messageId":"104","endLine":20,"endColumn":19},{"ruleId":"101","severity":1,"message":"114","line":21,"column":10,"nodeType":"103","messageId":"104","endLine":21,"endColumn":20},{"ruleId":"101","severity":1,"message":"115","line":28,"column":17,"nodeType":"103","messageId":"104","endLine":28,"endColumn":24},{"ruleId":"101","severity":1,"message":"116","line":28,"column":35,"nodeType":"103","messageId":"104","endLine":28,"endColumn":40},{"ruleId":"117","severity":1,"message":"118","line":27,"column":8,"nodeType":"119","endLine":27,"endColumn":10,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":8,"column":1,"nodeType":"123","endLine":24,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":4,"column":1,"nodeType":"123","endLine":13,"endColumn":2},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'connect' is defined but never used.","'Box' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Grid' is defined but never used.","'TextField' is defined but never used.","'CircularProgress' is defined but never used.","'PropTypes' is defined but never used.","'loginUser' is defined but never used.","'withRouter' is defined but never used.","'setData' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["126"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},"Update the dependencies array to be: [props]",{"range":"129","text":"130"},[743,745],"[props]"]